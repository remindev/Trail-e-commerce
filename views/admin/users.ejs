<div class="search-cont">
    <input type="text" onkeyup="search(this)" placeholder="search user">
    <button>search</button>
    <button onclick="addUser()">+ Add user</button>
</div>

<table class="table" id="tabe_of_users">
    <tr>
        <th class="col">#</th>
        <th class="col">Name</th>
        <th class="col">Email</th>
        <th class="col">Role</th>
        <th class="col">UID</th>
        <th class="col">Created</th>
        <th class="col">LastLogin</th>
        <th class="col">Order</th>
        <th class="col">Cart</th>
        <th class="col">-</th>
        <th class="col">-</th>
    </tr>

    <% users.forEach((user,index,array)=>{ %>

        <tr>
            <td>
                <%= index + 1 %>
            </td>
            <td>
                <%= user.name %>
            </td>
            <td>
                <%= user.email %>
            </td>
            <td>
                <%= user.admin.isAdmin?"A":"U"; %>
            </td>
            <td>
                <%= user.UID %>
            </td>
            <td>
                <%= user.creationTime %>
            </td>
            <td>
                <%= user.lastLoginTime %>
            </td>
            <td>
                <%= user.orders.length %>
            </td>
            <td>
                <%= user.cart.length %>
            </td>
            <td><img src="/res/edit-user.svg" alt="Edit" onclick="updatePopUp(1,this,true)" id="btn_of_the_button_UID"
                    identifier="<%=user.UID%>"></td>
            <td><img onclick="deletePopup(1,this.parentElement.parentElement)" src="/res/delete.svg" alt=""></td>
        </tr>

        <% }); %>

</table>

<div class="update-user-form" id="delete_user_cont" style="display: none;">

    <div class="canceler" id="cancler_popup_delete" onclick="deletePopup()"></div>

    <div class="edit-form" id="delete_user_form">
        <h6>Delete - <span id="conform_email_deleteA">Email</span></h6>
        <p><b>Note : </b> After deletion account cannot be recovered !</p>
        <label for="conform">Please type <b id="conform_email_deleteB">email of user</b> to confirm.</label>
        <div class="disp-error mt-2" id="disp_error_delete" style="display: none;">
            -
        </div>
        <input type="text" autocomplete="off" name="conform" id="input_delete_comform"
            placeholder="Type here to confirm">
        <button class="d" onclick="deletePopup()">Cancel</button>
        <button class="d s mt-3" id="delete_btn_submint" disabled onclick="deleteUser()">continue and delete this
            account</button>
    </div>

</div>

<div class="update-user-form" id="update_user_field_main_cont" style="display: none;">

    <div class="canceler" id="cancler_popup" onclick="updatePopUp()"></div>

    <div class="edit-form">
        <h6><span>Edit -</span> <span id="user_data_edit_conformation">123@abc.com</span></h6>

        <p><b>Note :</b>&nbsp; You can leave feld empty if there is no updation</p>

        <div class="fields" id="update_user_fields">

            <div class="disp-error" style="display: none;">
                -
            </div>

            <div>
                <label for="name">Name <span class="err-disp"></span></label>
                <input autocomplete="off" type="text" name="name" autocomplete="off" placeholder="name" value="">
            </div>

            <div>
                <label for="emali">Email <span class="err-disp"></span></label>
                <input autocomplete="off" type="text" autocomplete="off" placeholder="email" value="">
            </div>

            <div>
                <label for="passord">Role ( <b>A</b> or <b>U</b> ) <span class="err-disp"></span></label>
                <input type="text" placeholder="Role" value="">
            </div>

            <div>
                <label for="password">password <span class="err-disp"></span></label>
                <input autocomplete="off" type="password" autocomplete="off" placeholder="new password" value="">
            </div>

            <div>
                <label for="password">confirm <span class="err-disp"></span></label>
                <input autocomplete="off" type="password" autocomplete="off" placeholder="confirm new passord" value="">
            </div>

            <div class="hidden">
                <input autocomplete="off" type="text" hidden id="hidden_input">
            </div>

            <div class="btn-cont">
                <button id="button_cancel_popup_remiver" onclick="updatePopUp()">Cancel</button>
                <button onclick="updateUser(this)">Update</button>
            </div>

        </div>

    </div>

</div>

<script>

    function search(input) {
        // Declare variables
        var filter, table, tr, td, i, txtValue;
        filter = input.value.toUpperCase();
        table = document.getElementById("tabe_of_users");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {

            td = tr[i].getElementsByTagName("td")[2];

            if (td) {

                txtValue = td.textContent || td.innerText;

                if (txtValue.toUpperCase().indexOf(filter) > -1) {

                    tr[i].style.display = "";

                } else {

                    tr[i].style.display = "none";

                };

            };
        };
    };

</script>

<script>

    var deleteIDHolder = '';

    let confirmInput = document.getElementById("input_delete_comform");

    confirmInput.addEventListener('keyup', (e) => {

        let refA = document.getElementById('conform_email_deleteA');

        let btn = document.getElementById('delete_btn_submint');

        if (refA.innerText == e.target.value) {

            btn.removeAttribute("disabled");

            btn.style.backgroundColor = '#b43131';

        } else {

            btn.setAttribute('disabled', '');

            btn.style.backgroundColor = '#7a4141';

        };

    });

    function deletePopup(action, doc) {

        let delete_cancler = document.getElementById("cancler_popup_delete");

        let mainDoc = document.getElementById("delete_user_cont");

        let refA = document.getElementById('conform_email_deleteA');

        let refB = document.getElementById('conform_email_deleteB');

        let confirmInput = document.getElementById("input_delete_comform");

        let allBtns = mainDoc.querySelectorAll('button');

        let disp_err = document.getElementById("disp_error_delete");

        disp_err.style.display = 'none';

        allBtns[1].setAttribute("disabled",'');

        allBtns[1].style.backgroundColor = '#7a4141';

        if (action) {

            mainDoc.style.display = 'grid';

            /**
             * @type {NodeList} fields
             */
            let fields = doc.querySelectorAll("td");

            let email = fields[2];

            let UID = fields[4];

            refA.innerText = email.innerText;

            refB.innerText = email.innerText;

            deleteIDHolder = UID.innerText;

            confirmInput.value = '';


        } else {

            mainDoc.style.display = 'none';

        };

    };

    async function deleteUser() {

        let delete_cancler = document.getElementById("cancler_popup_delete");

        let mainDoc = document.getElementById("delete_user_cont");

        let refA = document.getElementById('conform_email_deleteA');

        let refB = document.getElementById('conform_email_deleteB');

        let confirmInput = document.getElementById("input_delete_comform");

        let allBtns = mainDoc.querySelectorAll('button');

        let disp_err = document.getElementById("disp_error_delete");


        function dispErr(message, good) {

            let doc = disp_err;

            if (message) {

                doc.style.backgroundColor = good ? "#d2ffd2" : "#ffd2d2";
                doc.textContent = message;

                doc.style.display = 'flex';

            } else {

                doc.style.display = 'none';

            };

        };

        if (refA.innerText == confirmInput.value) {

            let res = await fetch('/admin/deleteUser', {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ UID: deleteIDHolder })
            });

            let data = await res.json();

            if (data.status == 'error') {

                dispErr(data.message);

            } else {

                dispErr(data.message, true);

                delete_cancler.setAttribute("onclick", 'window.location.reload()');
                allBtns[0].setAttribute("onclick", 'window.location.reload()');

            };

        }

    };

    function updatePopUp(action, btn, add) {

        let doc = document.getElementById("update_user_field_main_cont");

        if (action) {

            doc.style.display = 'flex';

            if (add) {

                initlal(btn);

            };

        } else {
            doc.style.display = 'none';
        };

    };

    function initlal(button) {

        let docTo = document.getElementById("update_user_fields");

        let inputFieldsTo = docTo.querySelectorAll("input");

        let errElement = docTo.querySelector("div.disp-error");

        let UID = button.getAttribute('identifier');

        /** @type {Document} */
        let docFrom = button.parentElement.parentElement;

        let fieldsListFrom = docFrom.querySelectorAll("td");


        let buttons = docTo.querySelectorAll("button");


        let nameFrom = fieldsListFrom[1].innerText.trim();

        let emailFrom = fieldsListFrom[2].innerText.trim();

        let isAdminFrom = fieldsListFrom[3].innerText.trim();

        errElement.style.display = 'none';

        document.getElementById("user_data_edit_conformation").textContent = emailFrom;

        document.getElementById("hidden_input").value = UID;

        inputFieldsTo[0].setAttribute("placeholder", nameFrom);

        inputFieldsTo[0].value = '';

        inputFieldsTo[1].setAttribute("placeholder", emailFrom);

        inputFieldsTo[1].value = '';

        inputFieldsTo[2].setAttribute("placeholder", isAdminFrom);

        inputFieldsTo[2].value = '';

        inputFieldsTo[3].value = '';

        inputFieldsTo[4].value = '';



        buttons[1].innerText = 'Update';

        buttons[1].setAttribute('onclick', "updateUser(this)");

    };

    function addUser() {

        updatePopUp(1);

        let formDoc = document.getElementById("update_user_fields");

        var error_disp = formDoc.querySelector("div.disp-error");

        let fieldsListFrom = formDoc.querySelectorAll("input");

        let buttons = formDoc.querySelectorAll("button");

        error_disp.style.display = 'none';        

        let name = fieldsListFrom[0];

        let email = fieldsListFrom[1];

        let role = fieldsListFrom[2];

        let password = fieldsListFrom[3];

        let conform = fieldsListFrom[4];

        name.setAttribute('placeholder','Name');
        
        name.value = '';

        email.setAttribute('placeholder','Email');

        email.value = '';

        role.setAttribute('placeholder','U or A');

        role.value = '';
        
        password.setAttribute('placeholder','Password');

        password.value = '';

        name.setAttribute('placeholder','Confirm');

        conform.value = '';


        let good = true;

        document.getElementById("user_data_edit_conformation").textContent = 'Add user';

        buttons[1].innerText = 'Add User';

        buttons[1].setAttribute('onclick', "addUserFinal(this)");

    };

    async function addUserFinal() {

        let formDoc = document.getElementById("update_user_fields");

        let fieldsListFrom = formDoc.querySelectorAll("input");


        let name = fieldsListFrom[0]

        let email = fieldsListFrom[1];

        let role = fieldsListFrom[2];

        let password = fieldsListFrom[3];

        let conform = fieldsListFrom[4];

        let good = true;


        dispState(100);

        dispErr();


        function dispErr(message, good) {

            var doc = formDoc.querySelector("div.disp-error");

            if (message) {

                doc.style.backgroundColor = good ? "#d2ffd2" : "#ffd2d2";
                doc.textContent = message;

                doc.style.display = 'flex';

            } else {

                doc.style.display = 'none';

            };

        };

        function dispState(fieldNo, message) {

            if (fieldNo) {

                switch (fieldNo) {

                    case 1: {

                        let err = name.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    case 2: {

                        let err = email.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    case 3: {

                        let err = role.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    case 4: {

                        let err = password.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    case 5: {

                        let err = conform.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    default: {

                        for (let i = 0; i < 5; i++) {

                            dispState((i + 1), "");

                        };

                        break;

                    };

                };

            };

        };


        if (name.value.trim().length < 2) {

            dispState(1, "Enter a valid name");

            good = false;

        };

        if (!email.value.trim().toLocaleLowerCase().match(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/)) {

            dispState(2, 'Enter a valid email');

            good = false;

        };



        if (role.value.trim() == 'A' || role.value.trim() == 'U') {

            // good

        } else {

            dispState(3, 'Enter a valid Role');

            good = false;

        };


        if (password.value.trim().length < 6) {

            dispState(4, 'Enter a valid password');

            good = false;

        } else if (password.value.trim().length != 0) {

            if (conform.value.trim() == password.value.trim()) {



            } else {

                dispState(5, "Confirm password dosn't match");

                good = false;

            }

        };

        if (good) {

            try {

                dispErr('Updating...', true);

                let res = await fetch('/admin/addUser', {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    method: "POST",
                    body: JSON.stringify({
                        email: email.value.toLocaleLowerCase(),
                        password: password.value,
                        name: name.value,
                        role: role.value,
                    })
                });

                let data = await res.json();

                if (data.status == 'error') {

                    dispErr(data.message);

                } else {

                    document.getElementById("button_cancel_popup_remiver").setAttribute("onclick", 'window.location.reload()');
                    document.getElementById("cancler_popup").setAttribute("onclick", 'window.location.reload()');

                    dispErr(data.message, true);

                };


            } catch (error) {

                dispErr('Error creating user');

            };

        };

    }

    async function updateUser(button, addUser) {

        /** @type {Document} */
        let docFrom = button.parentElement.parentElement;

        let button_cancel = button.parentElement.querySelectorAll('button')[0];

        let fieldsListFrom = docFrom.querySelectorAll("input");

        let errElement = docFrom.querySelector("div.disp-error");

        let good = true;

        let name = fieldsListFrom[0]

        let email = fieldsListFrom[1];

        let role = fieldsListFrom[2];

        let password = fieldsListFrom[3];

        let conform = fieldsListFrom[4];

        let UID = document.getElementById("hidden_input").value;

        dispState(100);

        dispErr();

        function dispErr(message, good) {

            var doc = docFrom.querySelector("div.disp-error");

            if (message) {

                doc.style.backgroundColor = good ? "#d2ffd2" : "#ffd2d2";
                doc.textContent = message;

                doc.style.display = 'flex';

            } else {

                doc.style.display = 'none';

            };

        };

        function dispState(fieldNo, message) {

            if (fieldNo) {

                switch (fieldNo) {

                    case 1: {

                        let err = name.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    case 2: {

                        let err = email.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    case 3: {

                        let err = role.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    case 4: {

                        let err = password.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    case 5: {

                        let err = conform.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    default: {

                        fieldsListFrom.forEach((element, index, array) => {

                            if (index == array.length) {
                                element.parentElement.querySelector("span.err-disp").innerHTML = '';
                            };

                        });

                        break;

                    };

                };

            };

        };

        if (name.value.trim().length != 0 && name.value.trim().length < 2) {

            dispState(1, "Enter a valid name");

            good = false;

        };

        if (email.value.trim().length != 0 && !email.value.trim().match(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/)) {

            dispState(2, 'Enter a valid email');

            good = false;

        };

        if (role.value.trim().length != 0) {

            if (role.value.trim() == 'A' || role.value.trim() == 'U') {

                // good

            } else {

                dispState(3, 'Enter a valid Role');

                good = false;

            };

        };

        if (password.value.trim().length != 0 & password.value.trim().length < 6) {

            dispState(4, 'Enter a valid password');

            good = false;

        } else if (password.value.trim().length != 0) {

            if (conform.value.trim() == password.value.trim()) {



            } else {

                dispState(5, "Confirm password dosn't match");

                good = false;

            }

        };

        if (good) {

            dispState(100);
            dispErr('Updating...', true);

            try {

                let res = await fetch('/admin/updateUser', {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    method: "POST",
                    body: JSON.stringify({

                        UID: UID.length == 25 ? UID : null,
                        name: name.value.length > 0 ? name.value.trim() : null,
                        email: email.value.length > 0 ? email.value.trim() : null,
                        role: role.value.trim() == 'A' || role.value.trim() == 'U' ? role.value.trim() : null,
                        password: password.value.trim().length >= 6 && conform.value.trim() == password.value.trim() ? password.value.trim() : null

                    })
                });

                let data = await res.json();

                if (data.status == 'error') {

                    dispErr(data.message);

                } else {

                    dispErr(data.message, true);

                    button_cancel.setAttribute("onclick", 'window.location.reload()');
                    document.getElementById("cancler_popup").setAttribute("onclick", 'window.location.reload()');

                };


            } catch (error) {
                console.error(error);
            };

        };


    };

</script>
<div class="search-cont">
    <input type="text" placeholder="search user">
    <button>search</button>
    <button>+ Add user</button>
</div>

<table class="table">
    <tr>
        <th class="col">#</th>
        <th class="col">Name</th>
        <th class="col">Email</th>
        <th class="col">Role</th>
        <th class="col">UID</th>
        <th class="col">Created</th>
        <th class="col">LastLogin</th>
        <th class="col">Order</th>
        <th class="col">Cart</th>
        <th class="col">Edit</th>
    </tr>

    <% users.forEach((user,index,array)=>{ %>

        <tr>
            <td>
                <%= index + 1 %>
            </td>
            <td>
                <%= user.name %>
            </td>
            <td>
                <%= user.email %>
            </td>
            <td>
                <%= user.admin.isAdmin?"A":"U"; %>
            </td>
            <td>
                <%= user.UID %>
            </td>
            <td>
                <%= user.creationTime %>
            </td>
            <td>
                <%= user.lastLoginTime %>
            </td>
            <td>
                <%= user.orders.length %>
            </td>
            <td>
                <%= user.cart.length %>
            </td>
            <td><img src="/res/edit-user.svg" alt="Edit" onclick="updatePopUp(1,this)" id="btn_of_the_button_UID" identifier="<%=user.UID%>"></td>
        </tr>

        <% }); %>

</table>

<div class="update-user-form" id="update_user_field_main_cont" style="display: none;">

    <div class="canceler" onclick="updatePopUp()">

    </div>

    <div class="edit-form">
        <h6>Edit - <span id="user_data_edit_conformation">123@abc.com</span></h6>

        <p><b>Note :</b>&nbsp; You can leave feld empty if there is no updation</p>

        <div class="fields" id="update_user_fields">

            <div class="disp-error" style="display: none;">
                -
            </div>

            <div>
                <label for="name">Name <span class="err-disp"></span></label>
                <input type="text" name="name" autocomplete="off" placeholder="name" value="">
            </div>

            <div>
                <label for="emali">Email <span class="err-disp"></span></label>
                <input type="text" autocomplete="off" placeholder="email" value="">
            </div>

            <div>
                <label for="passord">Role ( <b>A</b> or <b>U</b> ) <span class="err-disp"></span></label>
                <input type="text" placeholder="Role" value="">
            </div>

            <div>
                <label for="passord">password <span class="err-disp"></span></label>
                <input type="text" autocomplete="off" placeholder="new password" value="">
            </div>

            <div>
                <label for="passord">conform <span class="err-disp"></span></label>
                <input type="text" autocomplete="off" placeholder="conform new passord" value="">
            </div>

            <div class="btn-cont">
                <button onclick="updatePopUp()">Cancel</button>
                <button onclick="updateUser(this)">Update</button>
            </div>

        </div>

    </div>

</div>

<script>

    function updatePopUp(action, btn) {

        let doc = document.getElementById("update_user_field_main_cont");

        if (action) {

            doc.style.display = 'flex';

            initlal(btn);

        } else {
            doc.style.display = 'none';
        };

    };

    function initlal(button) {

        let docTo = document.getElementById("update_user_fields");

        let inputFieldsTo = docTo.querySelectorAll("input");

        let UID = button.getAttribute('identifier');

        /** @type {Document} */
        let docFrom = button.parentElement.parentElement;

        let fieldsListFrom = docFrom.querySelectorAll("td");


        let nameFrom = fieldsListFrom[1].innerText.trim();

        let emailFrom = fieldsListFrom[2].innerText.trim();

        let isAdminFrom = fieldsListFrom[3].innerText.trim();

        document.getElementById("user_data_edit_conformation").textContent = emailFrom;


        inputFieldsTo[0].setAttribute("placeholder", nameFrom);

        inputFieldsTo[0].value = '';

        inputFieldsTo[1].setAttribute("placeholder", emailFrom);

        inputFieldsTo[1].value = '';

        inputFieldsTo[2].setAttribute("placeholder", isAdminFrom);

        inputFieldsTo[2].value = '';

        inputFieldsTo[3].value = '';

        inputFieldsTo[4].value = '';

    };

    async function updateUser(button) {

        /** @type {Document} */
        let docFrom = button.parentElement.parentElement;

        let fieldsListFrom = docFrom.querySelectorAll("input");

        let errElement = docFrom.querySelector("div.disp-error");

        let good = true;

        let name = fieldsListFrom[0]

        let email = fieldsListFrom[1];

        let role = fieldsListFrom[2];

        let passord = fieldsListFrom[3];

        let conform = fieldsListFrom[4];

        let UID = document.getElementById("btn_of_the_button_UID").getAttribute('identifier');

        dispState(100);

        function dispErr(message, good) {

            var doc = docFrom.querySelector("div.disp-error");

            if (message) {

                doc.style.backgroundColor = good ? "#d2ffd2" : "#ffd2d2";
                doc.textContent = message;

                doc.style.display = 'flex';

            } else {

                doc.style.display = 'none';

            };

        };

        function dispState(fieldNo, message) {

            if (fieldNo) {

                switch (fieldNo) {

                    case 1: {

                        let err = name.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    case 2: {

                        let err = email.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    case 3: {

                        let err = role.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    case 4: {

                        let err = passord.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    case 5: {

                        let err = conform.parentElement.querySelector("span.err-disp");

                        err.textContent = message;

                        break;

                    };

                    default: {

                        fieldsListFrom.forEach((element, index, array) => {

                            element.parentElement.querySelector("span.err-disp").innerHTML = '';

                        });

                        break;

                    };

                };

            };

        };

        if (name.value.trim().length != 0 && name.value.trim().length < 2) {

            dispState(1, "Enter a valid name");

            good = false;

        };

        if (email.value.trim().length != 0 && !email.value.trim().match(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/)) {

            dispState(2, 'Enter a valid email');

            good = false;

        };

        if (role.value.trim().length != 0) {

            if (role.value.trim() == "A" || role.value.trim() == 'U') {


                // good

            } else {

                dispState(3, 'Enter a valid Role');

                good = false;

            };

        };

        if (passord.value.trim().length != 0 & passord.value.trim().length < 6) {

            dispState(4, 'Enter a valid password');

            good = false;

        } else if (passord.value.trim().length != 0) {

            if (conform.value.trim() == passord.value.trim()) {



            } else {

                dispState(5, "Conform password dosn't match");

                good = false;

            }

        };

        if (good) {

            dispState(100);

            try {

                let res = await fetch('/admin/updateUser', {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    method: "POST",
                    body: JSON.stringify({

                        UID:UID.length==25?UID:null,
                        name:name.value.length>0?name.value.trim():null,
                        email:email.value.length>0?email.value.trim():null,
                        role:role.value == 'A' || role.value == 'U'?role.vlaue.trim():null,
                        passord:passord.value.length>=6 && conform.value == passord.value?passord.value.trim():null

                    })
                });

                let data = await res.json();

                if (data.status == 'error') {

                    dispErr(data.message);

                } else {

                    dispErr(data.message, true);

                };


            } catch (error) {
                console.error(error);
            };

        };


    };

</script>